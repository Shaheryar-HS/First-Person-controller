//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.14.0
//     from Assets/Input/DefaultInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

/// <summary>
/// Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Assets/Input/DefaultInput.inputactions".
/// </summary>
/// <remarks>
/// This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
/// </remarks>
/// <example>
/// <code>
/// using namespace UnityEngine;
/// using UnityEngine.InputSystem;
///
/// // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
/// public class Example : MonoBehaviour, MyActions.IPlayerActions
/// {
///     private MyActions_Actions m_Actions;                  // Source code representation of asset.
///     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.
///
///     void Awake()
///     {
///         m_Actions = new MyActions_Actions();              // Create asset object.
///         m_Player = m_Actions.Player;                      // Extract action map object.
///         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
///     }
///
///     void OnDestroy()
///     {
///         m_Actions.Dispose();                              // Destroy asset object.
///     }
///
///     void OnEnable()
///     {
///         m_Player.Enable();                                // Enable all actions within map.
///     }
///
///     void OnDisable()
///     {
///         m_Player.Disable();                               // Disable all actions within map.
///     }
///
///     #region Interface implementation of MyActions.IPlayerActions
///
///     // Invoked when "Move" action is either started, performed or canceled.
///     public void OnMove(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
///     }
///
///     // Invoked when "Attack" action is either started, performed or canceled.
///     public void OnAttack(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
///     }
///
///     #endregion
/// }
/// </code>
/// </example>
public partial class @DefaultInput: IInputActionCollection2, IDisposable
{
    /// <summary>
    /// Provides access to the underlying asset instance.
    /// </summary>
    public InputActionAsset asset { get; }

    /// <summary>
    /// Constructs a new instance.
    /// </summary>
    public @DefaultInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""DefaultInput"",
    ""maps"": [
        {
            ""name"": ""Character"",
            ""id"": ""798c5ea1-7d3d-4dfa-97fa-f33f1e7f493d"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""21f1a04f-93cd-468c-a25b-fbfa13285014"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""View"",
                    ""type"": ""PassThrough"",
                    ""id"": ""4e1564d4-f535-48f1-a409-7be2ba03291e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""7dc3d17e-92cc-4f14-8c54-eda1778cb4d6"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Crounh"",
                    ""type"": ""Button"",
                    ""id"": ""70815c4e-04cf-4bd8-94cf-ce0e5eef81e1"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Proun"",
                    ""type"": ""PassThrough"",
                    ""id"": ""1eb3a844-c392-4370-9b31-bdef78c72397"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""Button"",
                    ""id"": ""45622661-f769-4a25-8a06-107d40f3face"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SprintReliease"",
                    ""type"": ""Button"",
                    ""id"": ""f3d5bde1-4290-465b-ba4b-ef89029078c0"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeanLeftPressed"",
                    ""type"": ""Button"",
                    ""id"": ""14e2e7ea-49e4-4770-910b-615a9d41a2e8"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeanRightPressed"",
                    ""type"": ""Button"",
                    ""id"": ""22509081-0e14-4618-a566-15682505bcbd"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeanLeftRelised"",
                    ""type"": ""Button"",
                    ""id"": ""c867bf42-4203-4a47-8210-09d2c82171ca"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeanRightRelised"",
                    ""type"": ""Button"",
                    ""id"": ""285d8f14-a662-49f4-a96e-b1db4567e474"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a7043569-780d-44ca-9756-feb9abf6a09f"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""View"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""690222b1-5e02-449c-9f01-d6dbd8793137"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""f367f1eb-3e95-48a9-8ce3-a0835a48ff19"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""2f401c14-4d75-4170-ab30-3190b3ec522d"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""6e5d7dc4-d91a-47da-bebc-0a563c0f61e9"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""f0a86284-3e32-4bfe-916d-46c9550444af"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""781b2343-c871-4c3b-94ca-73a813b2affc"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e3d2c09a-d3c9-40ff-b45e-44d3e4cb95a4"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Crounh"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""620dd0eb-9c6a-426d-b2fd-83bc348c6e9d"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Proun"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dc7cb293-0207-42a6-8350-94f1c067155d"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Proun"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3e785e96-5af8-45eb-952b-525f7bd3c448"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f4e73b78-2bbc-4c34-a1c5-8ab922bfcc12"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SprintReliease"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3563f934-edec-4c73-a203-b94d9b509351"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeanLeftPressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9f5a8048-4114-48f1-a7d0-3813a9d517a7"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeanRightPressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f83cc578-e711-4d3f-a0a8-20b6c48d288e"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeanLeftRelised"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""922f49ba-430a-4343-ae48-0873d5edfcbf"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeanRightRelised"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Wepon"",
            ""id"": ""f79c4d52-ac05-42fc-a807-6cf253d1d39c"",
            ""actions"": [
                {
                    ""name"": ""Fire2Pressed"",
                    ""type"": ""Button"",
                    ""id"": ""6780e668-ba17-4474-854c-a443c25543b0"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Fire2Relised"",
                    ""type"": ""Button"",
                    ""id"": ""e9c63c06-e73e-4380-a286-890fe4fb60b1"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Fire1Pressed"",
                    ""type"": ""Button"",
                    ""id"": ""566192c9-c24b-4838-8758-d135ba78c7a6"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Fire1Relised"",
                    ""type"": ""Button"",
                    ""id"": ""08378f94-413c-4c33-97ea-6c6c282c4700"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6480df4d-7a1a-4a38-8c3e-f2c6e07c13f1"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire2Pressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0d1fb1e3-676e-4e7e-a168-a54354453f7d"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire2Relised"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bc4f88d3-28a5-4b23-ba0a-6c583c46753e"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire1Pressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""de560b5c-a00b-4e61-a04a-9717ab9275aa"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire1Relised"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Character
        m_Character = asset.FindActionMap("Character", throwIfNotFound: true);
        m_Character_Movement = m_Character.FindAction("Movement", throwIfNotFound: true);
        m_Character_View = m_Character.FindAction("View", throwIfNotFound: true);
        m_Character_Jump = m_Character.FindAction("Jump", throwIfNotFound: true);
        m_Character_Crounh = m_Character.FindAction("Crounh", throwIfNotFound: true);
        m_Character_Proun = m_Character.FindAction("Proun", throwIfNotFound: true);
        m_Character_Sprint = m_Character.FindAction("Sprint", throwIfNotFound: true);
        m_Character_SprintReliease = m_Character.FindAction("SprintReliease", throwIfNotFound: true);
        m_Character_LeanLeftPressed = m_Character.FindAction("LeanLeftPressed", throwIfNotFound: true);
        m_Character_LeanRightPressed = m_Character.FindAction("LeanRightPressed", throwIfNotFound: true);
        m_Character_LeanLeftRelised = m_Character.FindAction("LeanLeftRelised", throwIfNotFound: true);
        m_Character_LeanRightRelised = m_Character.FindAction("LeanRightRelised", throwIfNotFound: true);
        // Wepon
        m_Wepon = asset.FindActionMap("Wepon", throwIfNotFound: true);
        m_Wepon_Fire2Pressed = m_Wepon.FindAction("Fire2Pressed", throwIfNotFound: true);
        m_Wepon_Fire2Relised = m_Wepon.FindAction("Fire2Relised", throwIfNotFound: true);
        m_Wepon_Fire1Pressed = m_Wepon.FindAction("Fire1Pressed", throwIfNotFound: true);
        m_Wepon_Fire1Relised = m_Wepon.FindAction("Fire1Relised", throwIfNotFound: true);
    }

    ~@DefaultInput()
    {
        UnityEngine.Debug.Assert(!m_Character.enabled, "This will cause a leak and performance issues, DefaultInput.Character.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Wepon.enabled, "This will cause a leak and performance issues, DefaultInput.Wepon.Disable() has not been called.");
    }

    /// <summary>
    /// Destroys this asset and all associated <see cref="InputAction"/> instances.
    /// </summary>
    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    /// <inheritdoc cref="IEnumerable.GetEnumerator()" />
    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
    public void Enable()
    {
        asset.Enable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
    public void Disable()
    {
        asset.Disable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
    public IEnumerable<InputBinding> bindings => asset.bindings;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Character
    private readonly InputActionMap m_Character;
    private List<ICharacterActions> m_CharacterActionsCallbackInterfaces = new List<ICharacterActions>();
    private readonly InputAction m_Character_Movement;
    private readonly InputAction m_Character_View;
    private readonly InputAction m_Character_Jump;
    private readonly InputAction m_Character_Crounh;
    private readonly InputAction m_Character_Proun;
    private readonly InputAction m_Character_Sprint;
    private readonly InputAction m_Character_SprintReliease;
    private readonly InputAction m_Character_LeanLeftPressed;
    private readonly InputAction m_Character_LeanRightPressed;
    private readonly InputAction m_Character_LeanLeftRelised;
    private readonly InputAction m_Character_LeanRightRelised;
    /// <summary>
    /// Provides access to input actions defined in input action map "Character".
    /// </summary>
    public struct CharacterActions
    {
        private @DefaultInput m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public CharacterActions(@DefaultInput wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "Character/Movement".
        /// </summary>
        public InputAction @Movement => m_Wrapper.m_Character_Movement;
        /// <summary>
        /// Provides access to the underlying input action "Character/View".
        /// </summary>
        public InputAction @View => m_Wrapper.m_Character_View;
        /// <summary>
        /// Provides access to the underlying input action "Character/Jump".
        /// </summary>
        public InputAction @Jump => m_Wrapper.m_Character_Jump;
        /// <summary>
        /// Provides access to the underlying input action "Character/Crounh".
        /// </summary>
        public InputAction @Crounh => m_Wrapper.m_Character_Crounh;
        /// <summary>
        /// Provides access to the underlying input action "Character/Proun".
        /// </summary>
        public InputAction @Proun => m_Wrapper.m_Character_Proun;
        /// <summary>
        /// Provides access to the underlying input action "Character/Sprint".
        /// </summary>
        public InputAction @Sprint => m_Wrapper.m_Character_Sprint;
        /// <summary>
        /// Provides access to the underlying input action "Character/SprintReliease".
        /// </summary>
        public InputAction @SprintReliease => m_Wrapper.m_Character_SprintReliease;
        /// <summary>
        /// Provides access to the underlying input action "Character/LeanLeftPressed".
        /// </summary>
        public InputAction @LeanLeftPressed => m_Wrapper.m_Character_LeanLeftPressed;
        /// <summary>
        /// Provides access to the underlying input action "Character/LeanRightPressed".
        /// </summary>
        public InputAction @LeanRightPressed => m_Wrapper.m_Character_LeanRightPressed;
        /// <summary>
        /// Provides access to the underlying input action "Character/LeanLeftRelised".
        /// </summary>
        public InputAction @LeanLeftRelised => m_Wrapper.m_Character_LeanLeftRelised;
        /// <summary>
        /// Provides access to the underlying input action "Character/LeanRightRelised".
        /// </summary>
        public InputAction @LeanRightRelised => m_Wrapper.m_Character_LeanRightRelised;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Character; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="CharacterActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(CharacterActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="CharacterActions" />
        public void AddCallbacks(ICharacterActions instance)
        {
            if (instance == null || m_Wrapper.m_CharacterActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CharacterActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @View.started += instance.OnView;
            @View.performed += instance.OnView;
            @View.canceled += instance.OnView;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Crounh.started += instance.OnCrounh;
            @Crounh.performed += instance.OnCrounh;
            @Crounh.canceled += instance.OnCrounh;
            @Proun.started += instance.OnProun;
            @Proun.performed += instance.OnProun;
            @Proun.canceled += instance.OnProun;
            @Sprint.started += instance.OnSprint;
            @Sprint.performed += instance.OnSprint;
            @Sprint.canceled += instance.OnSprint;
            @SprintReliease.started += instance.OnSprintReliease;
            @SprintReliease.performed += instance.OnSprintReliease;
            @SprintReliease.canceled += instance.OnSprintReliease;
            @LeanLeftPressed.started += instance.OnLeanLeftPressed;
            @LeanLeftPressed.performed += instance.OnLeanLeftPressed;
            @LeanLeftPressed.canceled += instance.OnLeanLeftPressed;
            @LeanRightPressed.started += instance.OnLeanRightPressed;
            @LeanRightPressed.performed += instance.OnLeanRightPressed;
            @LeanRightPressed.canceled += instance.OnLeanRightPressed;
            @LeanLeftRelised.started += instance.OnLeanLeftRelised;
            @LeanLeftRelised.performed += instance.OnLeanLeftRelised;
            @LeanLeftRelised.canceled += instance.OnLeanLeftRelised;
            @LeanRightRelised.started += instance.OnLeanRightRelised;
            @LeanRightRelised.performed += instance.OnLeanRightRelised;
            @LeanRightRelised.canceled += instance.OnLeanRightRelised;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="CharacterActions" />
        private void UnregisterCallbacks(ICharacterActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @View.started -= instance.OnView;
            @View.performed -= instance.OnView;
            @View.canceled -= instance.OnView;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Crounh.started -= instance.OnCrounh;
            @Crounh.performed -= instance.OnCrounh;
            @Crounh.canceled -= instance.OnCrounh;
            @Proun.started -= instance.OnProun;
            @Proun.performed -= instance.OnProun;
            @Proun.canceled -= instance.OnProun;
            @Sprint.started -= instance.OnSprint;
            @Sprint.performed -= instance.OnSprint;
            @Sprint.canceled -= instance.OnSprint;
            @SprintReliease.started -= instance.OnSprintReliease;
            @SprintReliease.performed -= instance.OnSprintReliease;
            @SprintReliease.canceled -= instance.OnSprintReliease;
            @LeanLeftPressed.started -= instance.OnLeanLeftPressed;
            @LeanLeftPressed.performed -= instance.OnLeanLeftPressed;
            @LeanLeftPressed.canceled -= instance.OnLeanLeftPressed;
            @LeanRightPressed.started -= instance.OnLeanRightPressed;
            @LeanRightPressed.performed -= instance.OnLeanRightPressed;
            @LeanRightPressed.canceled -= instance.OnLeanRightPressed;
            @LeanLeftRelised.started -= instance.OnLeanLeftRelised;
            @LeanLeftRelised.performed -= instance.OnLeanLeftRelised;
            @LeanLeftRelised.canceled -= instance.OnLeanLeftRelised;
            @LeanRightRelised.started -= instance.OnLeanRightRelised;
            @LeanRightRelised.performed -= instance.OnLeanRightRelised;
            @LeanRightRelised.canceled -= instance.OnLeanRightRelised;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="CharacterActions.UnregisterCallbacks(ICharacterActions)" />.
        /// </summary>
        /// <seealso cref="CharacterActions.UnregisterCallbacks(ICharacterActions)" />
        public void RemoveCallbacks(ICharacterActions instance)
        {
            if (m_Wrapper.m_CharacterActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="CharacterActions.AddCallbacks(ICharacterActions)" />
        /// <seealso cref="CharacterActions.RemoveCallbacks(ICharacterActions)" />
        /// <seealso cref="CharacterActions.UnregisterCallbacks(ICharacterActions)" />
        public void SetCallbacks(ICharacterActions instance)
        {
            foreach (var item in m_Wrapper.m_CharacterActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CharacterActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="CharacterActions" /> instance referencing this action map.
    /// </summary>
    public CharacterActions @Character => new CharacterActions(this);

    // Wepon
    private readonly InputActionMap m_Wepon;
    private List<IWeponActions> m_WeponActionsCallbackInterfaces = new List<IWeponActions>();
    private readonly InputAction m_Wepon_Fire2Pressed;
    private readonly InputAction m_Wepon_Fire2Relised;
    private readonly InputAction m_Wepon_Fire1Pressed;
    private readonly InputAction m_Wepon_Fire1Relised;
    /// <summary>
    /// Provides access to input actions defined in input action map "Wepon".
    /// </summary>
    public struct WeponActions
    {
        private @DefaultInput m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public WeponActions(@DefaultInput wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "Wepon/Fire2Pressed".
        /// </summary>
        public InputAction @Fire2Pressed => m_Wrapper.m_Wepon_Fire2Pressed;
        /// <summary>
        /// Provides access to the underlying input action "Wepon/Fire2Relised".
        /// </summary>
        public InputAction @Fire2Relised => m_Wrapper.m_Wepon_Fire2Relised;
        /// <summary>
        /// Provides access to the underlying input action "Wepon/Fire1Pressed".
        /// </summary>
        public InputAction @Fire1Pressed => m_Wrapper.m_Wepon_Fire1Pressed;
        /// <summary>
        /// Provides access to the underlying input action "Wepon/Fire1Relised".
        /// </summary>
        public InputAction @Fire1Relised => m_Wrapper.m_Wepon_Fire1Relised;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Wepon; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="WeponActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(WeponActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="WeponActions" />
        public void AddCallbacks(IWeponActions instance)
        {
            if (instance == null || m_Wrapper.m_WeponActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_WeponActionsCallbackInterfaces.Add(instance);
            @Fire2Pressed.started += instance.OnFire2Pressed;
            @Fire2Pressed.performed += instance.OnFire2Pressed;
            @Fire2Pressed.canceled += instance.OnFire2Pressed;
            @Fire2Relised.started += instance.OnFire2Relised;
            @Fire2Relised.performed += instance.OnFire2Relised;
            @Fire2Relised.canceled += instance.OnFire2Relised;
            @Fire1Pressed.started += instance.OnFire1Pressed;
            @Fire1Pressed.performed += instance.OnFire1Pressed;
            @Fire1Pressed.canceled += instance.OnFire1Pressed;
            @Fire1Relised.started += instance.OnFire1Relised;
            @Fire1Relised.performed += instance.OnFire1Relised;
            @Fire1Relised.canceled += instance.OnFire1Relised;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="WeponActions" />
        private void UnregisterCallbacks(IWeponActions instance)
        {
            @Fire2Pressed.started -= instance.OnFire2Pressed;
            @Fire2Pressed.performed -= instance.OnFire2Pressed;
            @Fire2Pressed.canceled -= instance.OnFire2Pressed;
            @Fire2Relised.started -= instance.OnFire2Relised;
            @Fire2Relised.performed -= instance.OnFire2Relised;
            @Fire2Relised.canceled -= instance.OnFire2Relised;
            @Fire1Pressed.started -= instance.OnFire1Pressed;
            @Fire1Pressed.performed -= instance.OnFire1Pressed;
            @Fire1Pressed.canceled -= instance.OnFire1Pressed;
            @Fire1Relised.started -= instance.OnFire1Relised;
            @Fire1Relised.performed -= instance.OnFire1Relised;
            @Fire1Relised.canceled -= instance.OnFire1Relised;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="WeponActions.UnregisterCallbacks(IWeponActions)" />.
        /// </summary>
        /// <seealso cref="WeponActions.UnregisterCallbacks(IWeponActions)" />
        public void RemoveCallbacks(IWeponActions instance)
        {
            if (m_Wrapper.m_WeponActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="WeponActions.AddCallbacks(IWeponActions)" />
        /// <seealso cref="WeponActions.RemoveCallbacks(IWeponActions)" />
        /// <seealso cref="WeponActions.UnregisterCallbacks(IWeponActions)" />
        public void SetCallbacks(IWeponActions instance)
        {
            foreach (var item in m_Wrapper.m_WeponActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_WeponActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="WeponActions" /> instance referencing this action map.
    /// </summary>
    public WeponActions @Wepon => new WeponActions(this);
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Character" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="CharacterActions.AddCallbacks(ICharacterActions)" />
    /// <seealso cref="CharacterActions.RemoveCallbacks(ICharacterActions)" />
    public interface ICharacterActions
    {
        /// <summary>
        /// Method invoked when associated input action "Movement" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMovement(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "View" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnView(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Jump" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnJump(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Crounh" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnCrounh(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Proun" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnProun(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Sprint" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSprint(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "SprintReliease" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSprintReliease(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "LeanLeftPressed" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnLeanLeftPressed(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "LeanRightPressed" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnLeanRightPressed(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "LeanLeftRelised" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnLeanLeftRelised(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "LeanRightRelised" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnLeanRightRelised(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Wepon" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="WeponActions.AddCallbacks(IWeponActions)" />
    /// <seealso cref="WeponActions.RemoveCallbacks(IWeponActions)" />
    public interface IWeponActions
    {
        /// <summary>
        /// Method invoked when associated input action "Fire2Pressed" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnFire2Pressed(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Fire2Relised" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnFire2Relised(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Fire1Pressed" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnFire1Pressed(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Fire1Relised" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnFire1Relised(InputAction.CallbackContext context);
    }
}
